/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./client/editorClient.js":
/*!********************************!*\
  !*** ./client/editorClient.js ***!
  \********************************/
/***/ (() => {

eval("// Saved Client Data\n// Faction Ship Types\nconst factionShips = {\n  'Rebel Alliance': ['A-wing', 'ARC-170', 'Attack Shuttle', 'B-wing', 'CR90 Corvette', 'E-wing', 'GR-75 Medium Transport',\n    'HWK-290', 'K-wing', 'Scurrg H-6 Bomber', 'TIE Fighter', 'U-wing', 'VCX-100', 'X-wing', 'Y-wing',\n    'YT-1300', 'YT-2400', 'Z-95 Headhunter'],\n  'Galactic Empire': ['Firespray-31', 'Gozanti-class Cruiser', 'Lambda-class Shuttle', 'Raider-class Corvete', 'TIE Advanced',\n    'TIE Aggressor', 'TIE Adv. Prototype', 'TIE Bomber', 'TIE Defender', 'TIE Fighter', 'TIE Interceptor', 'TIE Phantom',\n    'TIE Punisher', 'TIE Striker', 'VT-49 Decimator'],\n  'Scum and Villainy': ['Aggressor', 'C-ROC Cruiser', 'Firespray-31', 'G-1A Starfighter', 'HWK-290', 'JumpMaster 5000',\n    'Kihraxz Fighter', 'Lancer-class Pursuit Craft', 'M3-A Interceptor', 'Protectorate Starfighter', 'Quadjumper',\n    'Scurrg H-6 Bomber', 'StarViper', 'Y-wing', 'YV-666', 'Z-95 Headhunter'],\n};\n\n// Client Fields\nlet user;\nlet faction;\nlet squadronObj;\nconst currentPoints = 0;\nlet message;\n\n// Save Squadron\nconst saveSquadron = async () => {\n  // Creates an json object to be saved\n  const saveObj = {\n    user: window.location.search.split('&')[0].split('=')[1],\n    squadron: squadronObj,\n  };\n\n  // Posts the saveObj back to the server\n  const response = await fetch('/saveSquadron', {\n    method: 'post',\n    headers: {\n      'content-type': 'application/json',\n      accept: 'application/json',\n    },\n    body: JSON.stringify(saveObj),\n  });\n\n  handleResponse(response, 'save');\n};\n\n// Function for printing squadron's cards\nconst printSquadron = () => {\n  // Updates the stats for the squadron\n  document.querySelector('#stats').textContent = `Points: ${squadronObj.currentPoints}/${squadronObj.maxPoints}     \n  Faction: ${squadronObj.faction}`;\n\n  // Loops through, printing the information for all cards present in the squadron\n  const squadron = document.querySelector('#squadron');\n  squadron.innerHTML = '';\n  for (const ship in squadronObj.ships) {\n    for (let i = 0; i < squadronObj.ships[ship].count; i++) {\n      // Creates the div Wrapper\n      const div = document.createElement('div');\n      div.classList.add('ship');\n\n      // Creates the data paragraphs\n      const p1 = document.createElement('p');\n      const p2 = document.createElement('p');\n      p1.textContent = `Pilot: ${squadronObj.ships[ship].name}`;\n      p2.textContent = `Points: ${squadronObj.ships[ship].points}`\n\n      // Creates the remove button\n      const btn = document.createElement('button');\n      btn.textContent = 'Remove From Squadron';\n      // If the ship being printed has multiple images, changes its class\n      if (squadronObj.ships[ship].image.length > 1){\n        div.classList.add('bigShip');\n        div.classList.remove('ship');\n      }\n      // When the button is clicked, remove the ship from the obj and the points total\n      btn.addEventListener('click', () => {\n        squadronObj.currentPoints -= squadronObj.ships[ship].points;\n\n        // Decrements the count for that ship, or removes it from the obj entirely\n        if (squadronObj.ships[ship].count > 1) {\n          squadronObj.ships[ship].count--;\n        } else {\n          delete squadronObj.ships[ship];\n        }\n\n        // Updates the messages\n        message.textContent = 'Ship Removed';\n\n        printSquadron();\n      });\n\n      // Append all of the elements to the div wrapper\n      div.appendChild(p1);\n      div.appendChild(p2)\n      for (const url in squadronObj.ships[ship].image) {\n        const img = document.createElement('img');\n        img.src = `/getImage?path=${squadronObj.ships[ship].image[url]}`;\n        div.appendChild(img);\n      }\n      div.appendChild(btn);\n\n      // Add it to the squadron section of the webpage\n      squadron.appendChild(div);\n    }\n  }\n};\n\n// Adds a ship to the local squadron data\nconst addShip = (_name, _points, _image) => {\n  // Updates the message\n  message.textContent = 'Ship Added';\n\n  // Adds the ship to the SquadronObj, incrementing the count if necessary\n  if (!squadronObj.ships[_name]) {\n    squadronObj.ships[_name] = {\n      name: _name,\n      points: _points,\n      image: _image,\n      count: 1,\n    };\n  } else {\n    squadronObj.ships[_name].count++;\n  }\n\n  squadronObj.currentPoints += _points;\n  printSquadron();\n};\n\n// Handles all response cases\nconst handleResponse = async (response, key) => {\n  const { status } = response;\n\n\n  if (status === 200) {\n    const resJSON = await response.json();\n\n    // If the response comes from loading in squadron's data\n    if (key === 'squadron') {\n      // Sets up the squadronObj\n      squadronObj = resJSON.content;\n      faction = squadronObj.faction;\n      document.querySelector('#squadronName').textContent += squadronObj.name;\n\n      // Creates Tabs for Ships\n      const pilots = document.querySelector('#pilots');\n      pilots.innerHTML = '';\n\n      // Info on how to create for in loops\n      // https://www.microverse.org/blog/how-to-loop-through-the-array-of-json-objects-in-javascript\n      for (const ship in factionShips[faction]) {\n        const div = document.createElement('div');\n        const p = document.createElement('p');\n\n        p.textContent = factionShips[faction][ship] + ' \\\\/';\n        p.classList.add('title');\n        div.classList.add('tab');\n        div.id = factionShips[faction][ship].replace(/ /g, '-');\n        p.addEventListener('click', () => {\n          let ships = div.getElementsByClassName('ship');\n          let bigShip = div.getElementsByClassName('bigShip');\n\n          // Toggles hidden value for regular ships\n          for (let ship in ships){\n            if (ships[ship].hidden){\n              ships[ship].hidden = false;\n            } else {\n              ships[ship].hidden = true;\n            }\n          }\n        }); // Functionality for opening tabs of ships\n\n        div.appendChild(p);\n        pilots.appendChild(div);\n      }\n\n      // Prints the squadron to the screen\n      printSquadron();\n\n      // Loads in the faction's pilots if the squadron is loaded in\n      const pilotResponse = await fetch(`/getFactionData?faction=${faction}`, {\n        method: 'get',\n        headers: {\n          accept: 'application/json',\n        },\n      });\n\n      handleResponse(pilotResponse, 'pilots');\n    // If the response comes from loading in the pilot data \n    } else if (key === 'pilots') {\n      // Loops through each ship type in the current factions ships array above\n      for (const ship in factionShips[faction]) {\n        // Creates a tab reference\n        // Info on how to replace all spaces in a string\n        // https://stackoverflow.com/questions/3214886/javascript-replace-only-replaces-first-match\n        const tab = document.getElementById(`${factionShips[faction][ship].replace(/ /g, '-')}`);\n\n        // Special creation function for creating the CR90 Corvette\n        if (faction === 'Rebel Alliance' && factionShips[faction][ship] === 'CR90 Corvette') {\n          // Creates the div wrapper\n          const div = document.createElement('div');\n          div.id = 'CR90-Corvette';\n\n          // Creates the data paragraphs\n          const p1 = document.createElement('p');\n          const p2 = document.createElement('p');\n          let cost = resJSON.content[35].points + resJSON.content[36].points;\n          p1.textContent = 'Ship: CR90 Corvette';\n          p2.textContent = `Points: ${cost}`;\n\n          // Creates a button to add the card to the squadron\n          const button = document.createElement('button');\n          button.textContent = 'Add To Squadron';\n          button.addEventListener('click', () => {\n            // Checks if the card will bring the squadrons points above the maximum value\n            if (squadronObj.currentPoints + 90 > squadronObj.maxPoints) {\n              message.textContent = 'Cannot Add Ship, Exceeds Max Squadron Value';\n              return;\n            }\n\n            // Adds the ship to the client's side\n            addShip('CR90 Corvette', 90, [resJSON.content[35].image, resJSON.content[36].image]);\n          });\n\n          // Sets up the two images for the ship\n          const img1 = document.createElement('img');\n          const img2 = document.createElement('img');\n          img1.src = `/getImage?path=${resJSON.content[35].image}`;\n          img2.src = `/getImage?path=${resJSON.content[36].image}`;\n          img1.alt = 'Ship Card';\n          img2.alt = 'Ship Card';\n\n          // Added elements to div\n          div.appendChild(p1);\n          div.appendChild(p2);\n          div.appendChild(img1);\n          div.appendChild(img2);\n          div.appendChild(button);\n\n          // Adding class and hidden status\n          div.classList.add('ship');\n          div.classList.add('bigShip');\n          div.hidden = true;\n\n          // Add to the tab\n          tab.appendChild(div);\n        // Special creation function for creating the Raider-class Corvete\n        } else if (faction === 'Galactic Empire' && factionShips[faction][ship] === 'Raider-class Corvete') {\n          // Creates the div wrapper\n          const div = document.createElement('div');\n          div.id = 'Raider-class-Corvete';\n\n          // Sets up the data paragraphs\n          const p1 = document.createElement('p');\n          const p2 = document.createElement('p');\n          let cost = resJSON.content[49].points + resJSON.content[50].points;\n          p1.textContent = 'Ship: CR90 Corvette';\n          p2.textContent = `Points: ${cost}`;\n\n          // Creates a button to add the card to the squadron\n          const button = document.createElement('button');\n          button.textContent = 'Add To Squadron';\n          button.addEventListener('click', () => {\n            // Checks if the card will bring the squadrons points above the maximum value\n            if (squadronObj.currentPoints + cost > squadronObj.maxPoints) {\n              message.textContent = 'Cannot Add Ship, Exceeds Max Squadron Value';\n              return;\n            }\n\n            // Adds the ship to the client's side\n            addShip('Raider-class Corvete', cost, [resJSON.content[49].image, resJSON.content[50].image]);\n          });\n\n          // Sets up the images\n          const img1 = document.createElement('img');\n          const img2 = document.createElement('img');\n          img1.src = `/getImage?path=${resJSON.content[49].image}`;\n          img2.src = `/getImage?path=${resJSON.content[50].image}`;\n          img1.alt = 'Ship Card';\n          img2.alt = 'Ship Card';\n\n          // Adds children to the div\n          div.appendChild(p1);\n          div.appendChild(p2);\n          div.appendChild(img1);\n          div.appendChild(img2);\n          div.appendChild(button);\n\n          // Adds classes and hidden status\n          div.classList.add('ship');\n          div.classList.add('bigShip');\n          div.hidden = true;\n\n          // Appends to the tab\n          tab.appendChild(div);\n        // For every other ship\n        } else {\n          // Gets a filtered array from the response of all ships of the current type\n          const filtered = resJSON.content.filter((x) => x.ship === factionShips[faction][ship]);\n          for (const pilot in filtered) {\n            // Creates the div wrapper\n            const div = document.createElement('div');\n            div.id = filtered[pilot].name;\n\n            // Creates the data paragraphs\n            const p1 = document.createElement('p');\n            const p2 = document.createElement('p');\n            p1.textContent = `Pilot: ${filtered[pilot].name}`;\n            p2.textContent = `Points: ${filtered[pilot].points}`;\n\n            // Creates a button to add the card to the squadron\n            const button = document.createElement('button');\n            button.textContent = 'Add To Squadron';\n            button.addEventListener('click', () => {\n              // Checks if the card will bring the squadrons points above the maximum value\n              if (squadronObj.currentPoints + filtered[pilot].points > squadronObj.maxPoints) {\n                message.textContent = 'Cannot Add Ship, Exceeds Max Squadron Value';\n                return;\n              }\n\n              // Adds the ship to the client's side\n              addShip(filtered[pilot].name, filtered[pilot].points, [filtered[pilot].image]);\n            });\n\n            // Creates the ship image\n            const img = document.createElement('img');\n            img.src = `/getImage?path=${filtered[pilot].image}`;\n\n            // Add elements to the div\n            div.appendChild(p1);\n            div.appendChild(p2);\n            div.appendChild(img);\n            div.appendChild(button);\n\n            // Add class and hidden status\n            div.classList.add('ship');\n            div.hidden = true;\n\n            // Add div to the tab\n            tab.appendChild(div);\n          }\n        }\n      }\n    }\n  // If not a 200 code, update the message based on the status code\n  } else if (status === 204) {\n    message.textContent = 'Squadron Saved';\n  } else if (status === 400) {\n    const resJSON = await response.json();\n    message.textContent = `${resJSON.message}`;\n  } else if (status === 404) {\n    const resJSON = await response.json();\n    message.textContent = `${resJSON.message}`; \n  }\n};\n\n// Init function\nconst init = async () => {\n  // Gets the message element\n  message = document.getElementById('message');\n\n  // Gets the necessary data for the squadron\n  const squadronResponse = await fetch(`/getSquadronInfo${window.location.search}`, {\n    method: 'get',\n    headers: {\n      'content-type': 'application:x-www-form-urlencoded',\n      accept: 'application/json',\n    },\n  });\n\n  handleResponse(squadronResponse, 'squadron');\n\n  // Set up Return to Homepage Button\n  const returnBtn = document.querySelector('#home');\n  returnBtn.addEventListener('click', () => { window.location.href = '/'; });\n\n  // Set up Save Squadron Button\n  document.querySelector('#save').addEventListener('click', saveSquadron);\n};\n\nwindow.onload = init;\n\n\n//# sourceURL=webpack://430project1/./client/editorClient.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./client/editorClient.js"]();
/******/ 	
/******/ })()
;